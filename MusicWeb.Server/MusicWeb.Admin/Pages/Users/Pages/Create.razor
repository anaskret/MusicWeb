@page "/users/create";

@using MusicWeb.Services.Interfaces.Roles;
@using Microsoft.AspNetCore.Identity.UI.Services;
@using Admin.Pages.Settings.Models;

@inject UserManager<ApplicationUser> _userManager;
@inject IEmailSender _emailSender;
@inject IRolesService _rolesService;
@inject NavigationManager NavManager;
@inject ILogger<Create> _logger;

@attribute [Authorize(Roles = "Admin")]

<title>MusicWeb - Create Admin</title>

<div class="row">
    <EditForm Model="Input" OnValidSubmit="OnPostAsync">
        <div class="panel-hdr text-center mb-3">
            <div class="col-12">
                <div class="page-title-box d-sm-flex align-items-center justify-content-between">
                    <h4 class="mb-sm-0">Create Admin</h4>

                    <div class="page-title-right">
                        <button type="submit" class="btn btn-xs-block btn-primary waves-effect waves-light">
                            Save
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-sm-12">
            <div class="card mb-g">
                <div class="card-body">
                    <div class="frame-wrap p-0 border-0 m-0">
                        <StatusMessageComponent @ref="StatusMessage" />
                        <DataAnnotationsValidator />
                        <div class="row d-flex justify-content-center">
                            <div class="ml-auto mr-auto">
                                <div class="mb-4 row form-group">
                                    <label class="col-md-2 col-form-label text-muted">Login</label>
                                    <div class="col-md-10">
                                        <InputText @bind-Value="Input.Username" class="form-control" />
                                    </div>
                                    <div class="text-danger">
                                        <ValidationMessage For="() => Input.Username" />
                                    </div>
                                </div>
                                <div class="mb-4 row form-group">
                                    <label class="col-md-2 col-form-label text-muted">First Name</label>
                                    <div class="col-md-10">
                                        <InputText @bind-Value="Input.FirstName" class="form-control" />
                                    </div>
                                    <div class="text-danger">
                                        <ValidationMessage For="() => Input.FirstName" />
                                    </div>
                                </div>
                                <div class="mb-4 row form-group">
                                    <label class="col-md-2 col-form-label text-muted">Last Name</label>
                                    <div class="col-md-10">
                                        <InputText @bind-Value="Input.LastName" class="form-control" />
                                    </div>
                                    <div class="text-danger">
                                        <ValidationMessage For="() => Input.LastName" />
                                    </div>
                                </div>
                                <div class="mb-4 row form-group">
                                    <label class="col-md-2 col-form-label text-muted">Email</label>
                                    <div class="col-md-10">
                                        <InputText @bind-Value="Input.Email" class="form-control" />
                                    </div>
                                    <div class="text-danger">
                                        <ValidationMessage For="() => Input.Email" />
                                    </div>
                                </div>
                                <div class="mb-4 row form-group">
                                    <label class="col-md-2 col-form-label text-muted">Date of birth</label>
                                    <div class="col-md-10">
                                        <InputDate @bind-Value="Input.BirthDate" class="form-control" />
                                    </div>
                                    <div class="text-danger">
                                        <ValidationMessage For="() => Input.BirthDate" />
                                    </div>
                                </div>
                                <div class="mb-4 row form-group">
                                    <label class="col-md-2 col-form-label text-muted">Password</label>
                                    <div class="col-md-10">
                                        <InputText @bind-Value="Input.Password" type="password" class="form-control" />
                                    </div>
                                    <div class="text-danger">
                                        <ValidationMessage For="() => Input.Password" />
                                    </div>
                                </div>
                                <div class="mb-4 row form-group">
                                    <label class="col-md-2 col-form-label text-muted">Repeat password</label>
                                    <div class="col-md-10">
                                        <InputText @bind-Value="Input.ConfirmPassword" type="password" class="form-control" />
                                    </div>
                                    <div class="text-danger">
                                        <ValidationMessage For="() => Input.ConfirmPassword" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
</div>

@code {
    public UserModel Input { get; set; }

    public StatusMessageComponent StatusMessage { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Input = new UserModel();
    }

    public async Task OnPostAsync()
    {
        try
        {
            var user = new ApplicationUser
            {
                FirstName = Input.FirstName,
                LastName = Input.LastName,
                UserName = Input.Username,
                Email = Input.Email.Replace(" ", ""),
                BirthDate = Input.BirthDate,
                Type = UserType.Admin
            };

            if (await _userManager.FindByEmailAsync(user.Email) != null)
            {
                StatusMessage.Show("Error Email is already taken");
                return;
            }

            var result = await _userManager.CreateAsync(user, Input.Password);
            if (result.Succeeded)
            {
                user.LockoutEnabled = false;
                var resultUpdate = await _userManager.UpdateAsync(user);

                await _rolesService.SetAdminRoles(user.Id);

                NavManager.NavigateTo("/users/list", true);
                return;
            }

            foreach (var error in result.Errors)
            {
                if (error.Code.Equals("PasswordRequiresLower"))
                    StatusMessage.Show("Error Password has to have at least one lower case letter");
                if (error.Code.Equals("PasswordRequiresUpper"))
                    StatusMessage.Show("Error Password has to have at least one upper case letter");
                if (error.Code.Equals("PasswordRequiresDigit"))
                    StatusMessage.Show("Error Password has to have at least one digit");
                if (error.Code.Equals("DuplicateUserName"))
                    StatusMessage.Show("Error UserName is already taken");
            }
        }
        catch (Exception ex)
        {
            StatusMessage.Show("Error Something went wrong while creating a user");
            _logger.LogError(ex.Message);
        }
    }
}
