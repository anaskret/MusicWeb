@page "/artists/list"
@page "/artists/list/{PageNum:int}/{SearchString}"

@using Admin.Pages.Artists.Models
@using Admin.Pages.Artists.Factories.Interfaces
@using Services.Interfaces.Users

@inject IArtistModelFactory _artistModelFactory;
@inject ILogger<List> _logger;
@inject IUserService _userService;
@inject NavigationManager NavManager;

@*@attribute [Authorize(Roles = "Admin")]*@

<title>MusicWeb - Artits</title>

<div class="row">
    <div class="panel-hdr text-center">
        <div class="col-12">
            <div class="page-title-box d-sm-flex align-items-center justify-content-between">
                <h4 class="mb-sm-0">Artists</h4>
            </div>
        </div>
    </div>
    <div class="col-sm-12">
        <div class="card mb-g">
            <div class="card-body">
                <EditForm Model="Pager" OnSubmit="Search">
                    <StatusMessageComponent @ref="StatusMessage" />
                    <div class="frame-wrap p-0 border-0 m-0">
                        <div class="d-flex row justify-content-between mb-3">
                            <div class="form-group col-md-4 col-sm-12 mt-lg-0 mt-2">
                                <label class="form-label text-muted">Search</label>
                                <div class="row">
                                    <div class="col-8">
                                        <InputText @bind-Value="Pager.SearchString" class="form-control" />
                                    </div>
                                    <button type="submit" class="col-4 btn btn-xs-block btn-outline-info waves-effect waves-light">
                                        Search
                                    </button>
                                </div>
                            </div>

                            <div class="form-group ml-auto mr-auto col-md-2">
                            </div>
                            <div class="col-md-3 col-sm-12 d-flex justify-content-end">
                                <button type="button" class="btn btn-primary btn-xs-block mb-3 float-right waves-effect waves-themed" @onclick="GoToCreate">Create new artist</button>
                            </div>
                        </div>
                        <div class="table-responsive">
                            <table class="table m-0 table-striped table-bordered" id="table-example">
                                <thead class="thead-themed">
                                    <tr>
                                        <th>Name</th>
                                        <th>Establishment Date</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var artist in ArtistList)
                                    {
                                        <tr>
                                            <td>@artist.Name</td>
                                            <td>@artist.EstablishmentDate.ToShortDateString()</td>
                                            <td>
                                                <div class="text-center">
                                                    <a href="/artists/edit/@artist.Id" title="Edit">
                                                        <i class="fas fa-edit"></i>
                                                    </a>
                                                    <a href="#" @onclick="() => DeleteClick(artist.UserId)" @onclick:preventDefault title="Delete">
                                                        <i class="fas fa-trash-alt"></i>
                                                    </a>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <div class="mt-3">
                        @((MarkupString)HtmlExtensions.PagerArtist(Pager))
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>
<ConfirmComponent ConfirmationChanged="ConfirmDelete_Click" @ref="DeleteConfirmation"></ConfirmComponent>

@code {
    [Parameter]
    public int PageNum { get; set; }
    [Parameter]
    public int UserTypeNum { get; set; } = (int)UserType.All;
    [Parameter]
    public string SearchString { get; set; }

    public List<ArtistModel> ArtistList { get; set; }
    public PagerModel Pager { get; set; }

    protected ConfirmComponent DeleteConfirmation { get; set; }
    public StatusMessageComponent StatusMessage { get; set; }

    private string idToDelete;
    private string deleteMessage = "WARNING! If you delete a user all his ratings, comments etc. will also be deleted, if he's an artist, artist profile will be deleted too";

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        ArtistList = new List<ArtistModel>();
        Pager = new PagerModel()
        {
            PageIndex = PageNum,
            SearchString = SearchString
        };

        await _artistModelFactory.PrepareList(ArtistList, Pager);
    }

    private void DeleteClick(string id)
    {
        idToDelete = id;
        DeleteConfirmation.Show(deleteMessage);
    }

    protected async Task ConfirmDelete_Click(bool deleteConfirmed)
    {
        try
        {
            if (deleteConfirmed)
            {
                var model = ArtistList.FirstOrDefault(prp => prp.UserId == idToDelete);
                ArtistList.Remove(model);
                await _userService.DeleteAsync(idToDelete);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex.Message);
            StatusMessage.Show("Error Something went wrong while deleting the user. Please try again");
        }
    }

    private async Task Search()
    {
        ArtistList = new List<ArtistModel>();
        await _artistModelFactory.PrepareList(ArtistList, Pager);
    }

    private void GoToCreate()
    {
        NavManager.NavigateTo("/artists/create", true);
    }
}
