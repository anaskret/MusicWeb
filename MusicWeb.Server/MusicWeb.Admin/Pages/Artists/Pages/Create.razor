@page "/artists/create";

@using MusicWeb.Services.Interfaces.Roles;
@using Microsoft.AspNetCore.Identity.UI.Services;
@using Admin.Pages.Artists.Models;
@using MusicWeb.Models.Models.Origins;
@using MusicWeb.Models.Models.Artists;

@inject UserManager<ApplicationUser> _userManager;
@inject IEmailSender _emailSender;
@inject IRolesService _rolesService;
@inject NavigationManager NavManager;
@inject ILogger<Create> _logger;
@*@attribute [Authorize(Roles = "Admin")]*@

<title>MusicWeb - Create Artist</title>

<div class="row">
    <EditForm Model="Input" OnValidSubmit="OnPostAsync">
        <div class="panel-hdr text-center mb-3">
            <div class="col-12">
                <div class="page-title-box d-sm-flex align-items-center justify-content-between">
                    <h4 class="mb-sm-0">Create Artist</h4>

                    <div class="page-title-right">
                        <button type="submit" class="btn btn-xs-block btn-primary waves-effect waves-light">
                            Save
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-sm-12">
            <div class="card mb-g">
                <div class="card-body">
                    <div class="frame-wrap p-0 border-0 m-0">
                        <StatusMessageComponent @ref="StatusMessage" />
                        <DataAnnotationsValidator />
                        <div class="row d-flex justify-content-center">
                            <div class="ml-auto mr-auto">
                                <div class="mb-4 row form-group">
                                    <label class="col-md-2 col-form-label text-muted">Username</label>
                                    <div class="col-md-10">
                                        <InputText @bind-Value="Input.UserName" class="form-control" />
                                    </div>
                                    <div class="text-danger">
                                        <ValidationMessage For="() => Input.UserName" />
                                    </div>
                                </div>
                                <div class="mb-4 row form-group">
                                    <label class="col-md-2 col-form-label text-muted">Email</label>
                                    <div class="col-md-10">
                                        <InputText @bind-Value="Input.Email" class="form-control" />
                                    </div>
                                    <div class="text-danger">
                                        <ValidationMessage For="() => Input.Email" />
                                    </div>
                                </div>
                                <div class="mb-4 row form-group">
                                    <label class="col-md-2 col-form-label text-muted">First Name</label>
                                    <div class="col-md-10">
                                        <InputTextArea @bind-Value="Input.Bio" class="form-control" />
                                    </div>
                                    <div class="text-danger">
                                        <ValidationMessage For="() => Input.Bio" />
                                    </div>
                                </div>
                                <div class="mb-4 row form-group">
                                    <label class="col-md-2 col-form-label text-muted">Date of birth</label>
                                    <div class="col-md-10">
                                        <InputDate @bind-Value="Input.EstablishmentDate" class="form-control" />
                                    </div>
                                    <div class="text-danger">
                                        <ValidationMessage For="() => Input.EstablishmentDate" />
                                    </div>
                                </div>
                                <div class="mb-4 row form-group">
                                    <label class="col-md-2 col-form-label text-muted">Artist type</label>
                                    <InputSelect ValueExpression="()=>Input.ArtistType"
                                                 Value="@Input.ArtistType"
                                                 ValueChanged="async (ArtistType value) => await OnArtistTypeChange(value)" class="form-select">
                                        @foreach (ArtistType artist in Enum.GetValues(typeof(ArtistType)))
                                        {
                                            <option value="@artist">@artist.Description()</option>
                                        }
                                    </InputSelect>
                                </div>
                                @if (Input.ArtistType == ArtistType.BandMember)
                                {
                                    <label class="col-md-2 col-form-label text-muted">Band</label>
                                    <InputSelect ValueExpression="()=>Input.BandId"
                                                 Value="@Input.BandId" class="form-select">
                                        @foreach (var band in Bands)
                                        {
                                            <option value="@band.Id">@band.Name</option>
                                        }
                                    </InputSelect>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
</div>

@code {
    public ArtistModel Input { get; set; }

    public StatusMessageComponent StatusMessage { get; set; }

    public List<CountryModel> Countries{ get; set; }
    public List<StateModel> States { get; set; }
    public List<CityModel> Cities { get; set; }
    public List<BandModel> Bands { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Input = new ArtistModel();
        Countries = new List<CountryModel>();
        States = new List<StateModel>();
        Cities = new List<CityModel>();
        Bands = new List<BandModel>();
    }

    private async Task OnPostAsync()
    {
        try
        {
        }
        catch (Exception ex)
        {
            StatusMessage.Show("Error Something went wrong while creating a user");
            _logger.LogError(ex.Message);
        }
    }

    private async Task OnArtistTypeChange(ArtistType value)
        {

        }
}
