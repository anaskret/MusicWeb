@page "/songs/edit/{SongId:int}"

@using Admin.Pages.Albums.Models
@using Admin.Pages.Albums.Factories.Interfaces
@using Admin.Pages.Albums.Components
@using MusicWeb.Models.Entities
@using MusicWeb.Models.Dtos.Albums
@using MusicWeb.Services.Interfaces

@inject ISongFactory _factory
@inject ISongService _songService
@inject ILogger<Create> _logger
@inject IMapper _mapper
@inject NavigationManager NavManager

@attribute [Authorize]

<title>MusicWeb - Edit song</title>

<div class="row">
    <EditForm Model="@Model" OnValidSubmit="@Post">
        <div class="panel-hdr text-center mb-3">
            <div class="col-12">
                <div class="page-title-box d-sm-flex align-items-center justify-content-between">
                    <h4 class="mb-sm-0">Edit song</h4>

                    <div class="page-title-right row">
                        <div class="col-lg-6">
                            <button type="submit" class="btn btn-xs-block btn-primary waves-effect waves-light">
                                Save
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-sm-12">
            <div class="card mb-g">
                <div class="card-body">
                    <div class="frame-wrap p-0 border-0 m-0">
                        <StatusMessageComponent @ref="StatusMessageComponent" />
                        <DataAnnotationsValidator />
                        <div class="row">
                            <div class="ml-auto mr-auto">
                                <div class="form-group mb-3">
                                    <label class="form-label text-muted">Name</label>
                                    <InputText @bind-Value="Model.Name" class="form-control" />
                                    <div class="text-danger">
                                        <ValidationMessage For="@(() => Model.Name)" />
                                    </div>
                                </div>
                                <div class="form-group mb-3">
                                    <label class="form-label text-muted">Release Date</label>
                                    <InputDate @bind-Value="Model.ReleaseDate" class="form-control" />
                                    <div class="text-danger">
                                        <ValidationMessage For="@(() => Model.ReleaseDate)" />
                                    </div>
                                </div>
                                <div class="form-group mb-3">
                                    <label class="form-label text-muted">Length (in miliseconds)</label>
                                    <InputNumber type="numeric" @bind-Value="Model.Length" class="form-control" />
                                    <div class="text-danger">
                                        <ValidationMessage For="@(() => Model.Length)" />
                                    </div>
                                </div>
                                <div class="form-group mb-3">
                                    <label class="form-label text-muted">Position on the album</label>
                                    <InputNumber type="numeric" @bind-Value="Model.PositionOnAlbum" class="form-control" />
                                    <div class="text-danger">
                                        <ValidationMessage For="@(() => Model.PositionOnAlbum)" />
                                    </div>
                                </div>
                                <div class="form-group mb-3">
                                    <label class="form-label text-muted">Text</label>
                                    <InputTextArea type="numeric" @bind-Value="Model.Text" class="form-control" />
                                    <div class="text-danger">
                                        <ValidationMessage For="@(() => Model.Text)" />
                                    </div>
                                </div>
                                <div class="form-group mb-3">
                                    <label class="form-label text-muted">Composer</label>
                                    <InputSelect @bind-Value="Model.ComposerId" class="form-select">
                                        @foreach (var composer in Composers)
                                        {
                                            <option value="@composer.Id">@composer.Name</option>
                                        }
                                    </InputSelect>
                                </div>
                                <div class="text-danger">
                                    <ValidationMessage For="@(() => Model.ComposerId)" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
</div>

@code
{
    [Parameter]
    public int SongId { get; set; }

    public CreatorSongModel Model { get; set; }
    public List<ArtistSelectModel> Composers { get; set; }

    private StatusMessageComponent StatusMessageComponent;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Model = new CreatorSongModel();
        Composers = new List<ArtistSelectModel>();

        Model = await _factory.PrepareEdit(SongId, Composers);
    }

    private async Task Post()
    {
        try
        {
            var mappedOrder = _mapper.Map<Song>(Model);

            await _songService.UpdateAsync(mappedOrder);

            NavManager.NavigateTo("/albums/list");
        }
        catch (ApplicationException ex)
        {
            StatusMessageComponent.Show(ex.Message);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex.Message);
            StatusMessageComponent.Show("Error An error occured while adding the album");
        }
    }
}