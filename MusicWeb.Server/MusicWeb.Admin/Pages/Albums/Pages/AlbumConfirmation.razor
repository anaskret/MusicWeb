@page "/albums/list"

@using MusicWeb.Admin.Pages.Albums.Factories.Interfaces
@using MusicWeb.Admin.Pages.Albums.Models
@using MusicWeb.Services.Interfaces
@using MusicWeb.Services.Interfaces.Songs

@inject IAlbumFactory _albumFactory;
@inject IMapper _mapper;
@inject IAlbumService _albumService;
@inject ISongService _songService;
@inject NavigationManager NavManager;
@inject ILogger<AlbumConfirmation> _logger;

<title>MusicWeb - Album Confirmation</title>

<div class="row">
    <div class="panel-hdr text-center mb-3">
        <div class="col-12">
            <div class="page-title-box d-sm-flex align-items-center justify-content-between">
                <h4 class="mb-sm-0">Albums</h4>
            </div>
        </div>
    </div>
    <div class="row d-flex align-items-center justify-content-between mb-3">
        <div class="col-sm-12 col-md-4">
            <select class="form-select" @onchange="(async (e) => await PageFilter(e))" >
                <option value="0">All</option>
                <option value="1">Unconfirmed</option>
                <option value="2">Confirmed</option>
            </select>
        </div>
        <div class="d-flex flex-row-reverse col-sm-12 col-md-6">
            <button type="button" class=" btn btn-xs-block btn-primary waves-effect waves-light" @onclick="GoToCreate">Create</button>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-12 col-md-8">
            <div class="card mb-g">
                <div class="card-body">
                    <StatusMessageComponent @ref="StatusMessage" />
                    <div class="frame-wrap p-0 border-0 m-0">
                        <div class="table-responsive">
                            <table class="table m-0 table-striped table-bordered" id="table-example">
                                <thead class="thead-themed">
                                    <tr>
                                        <th>Title</th>
                                        <th>Artist</th>
                                        <th>Genre</th>
                                        <th>Release Date</th>
                                        <th>Is confirmed</th>
                                        <th class="text-center">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var album in List)
                                    {
                                        <tr>
                                            <td>
                                                @album.Name
                                            </td>
                                            <td>
                                                @album.ArtistName
                                            </td>
                                            <td>
                                                @album.AlbumGenreName
                                            </td>
                                            <td>
                                                @if(album.ReleaseDate == DateTime.MinValue)
                                                {
                                                    @:Not set
                                                }
                                                else
                                                {
                                                    @album.ReleaseDate.ToShortDateString()
                                                }
                                            </td>
                                            <td>
                                                @(album.IsConfirmed ? "Yes" : "No")
                                            </td>
                                            <td>
                                                <div class="text-center">
                                                    @if (!album.IsConfirmed)
                                                    {
                                                        <a href="#" title="Check songs" @onclick="() => LoadLines(album)" @onclick:preventDefault>
                                                            <i class="fas fa-eye"></i>
                                                        </a>
                                                        <a href="/albums/edit/@album.Id" title="Edit">
                                                            <i class="fas fa-edit"></i>
                                                        </a>
                                                        <a href="#" title="Confirm" @onclick="() => ConfirmAlbum(album.Id)" @onclick:preventDefault>
                                                            <i class="fas fa-check"></i>
                                                        </a>
                                                    }
                                                    else
                                                    {
                                                        <a href="#" title="Check songs" @onclick="() => LoadLines(album)" @onclick:preventDefault>
                                                            <i class="fas fa-eye"></i>
                                                        </a>
                                                        <a href="/albums/edit/@album.Id" title="Edit">
                                                            <i class="fas fa-edit"></i>
                                                        </a>
                                                    }
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-sm-12 col-md-4">
            <div class="card mb-g">
                <div class="card-body">
                    <div class="frame-wrap p-0 border-0 m-0">
                        <div class="table-responsive">
                            <table class="table m-0 table-striped table-bordered" id="table-example">
                                <thead class="thead-themed">
                                    <tr>
                                        <th>Name</th>
                                        <th>Length</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var line in SelectedModelLines)
                                    {
                                        <tr>
                                            <td>
                                                @line.Name
                                            </td>
                                            <td>
                                                @TimeSpan.FromMilliseconds(line.Length).ToString(@"hh\:mm\:ss")
                                            </td>
                                            <td>

                                                <a href="/songs/edit/@line.Id" title="Edit">
                                                    <i class="fas fa-edit"></i>
                                                </a>
                                                <a href="#" title="Delete" @onclick="() => DeleteSongClick(line.Id, line.AlbumId)" @onclick:preventDefault>
                                                    <i class="fas fa-trash-alt"></i>
                                                </a>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<ConfirmComponent ConfirmationChanged="ConfirmDelete_Click" @ref="DeleteConfirmation"></ConfirmComponent>

@code {
    [Parameter]
    public List<AlbumPageModel> List { get; set; }
    public List<SongPageModel> SelectedModelLines { get; set; }

    public int Filter { get; set; }

    public StatusMessageComponent StatusMessage { get; set; }

    private int idToDelete;
    private int songIdToDelete;
    private int albumId;
    protected ConfirmComponent DeleteConfirmation { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        List = new List<AlbumPageModel>();
        SelectedModelLines = new List<SongPageModel>();

        List = await _albumFactory.PrepareAlbums(Filter);
        StateHasChanged();
    }

    public async Task ConfirmAlbum(int id)
    {
        try
        {
            await _albumService.ConfirmAlbumAsync(id);
            List.Remove(List.FirstOrDefault(prp => prp.Id == id));
            StatusMessage.Show("Album confirmed successfuly");
            StateHasChanged();
        }
        catch(Exception ex)
        {
            _logger.LogError(ex.Message,ex);
            StatusMessage.Show("Error An unexpected exception occured while confirming the album");
        }
    }

    public async Task DeleteClick(int id)
    {
        idToDelete = id;
        DeleteConfirmation.Show();
    }

    public async Task DeleteSongClick(int id, int albumToDeleteId)
    {
        songIdToDelete = id;
        albumId = albumToDeleteId;
        DeleteConfirmation.Show();
    }

    protected async Task ConfirmDelete_Click(bool deleteConfirmed)
    {
        try
        {
            if (deleteConfirmed && songIdToDelete > 0)
            {
                await _songService.DeleteAsync(songIdToDelete);
                var album = List.FirstOrDefault(prp => prp.Id == albumId);
                if(album != null)
                    album.SongList.Remove(album.SongList.FirstOrDefault(prp => prp.Id == songIdToDelete));

                songIdToDelete = 0;
                albumId = 0;
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex.Message);
            StatusMessage.Show("Error An error occured while deleting the data");
        }
    }

    async Task PageFilter(ChangeEventArgs e)
    {
        try
        {
            List = new List<AlbumPageModel>();
            var value = Convert.ToInt32(e.Value);
            List = await _albumFactory.PrepareAlbums(value);
            await InvokeAsync(() => StateHasChanged());
        }
        catch(Exception ex)
        {

        }
    }

    private async Task LoadLines(AlbumPageModel model)
    {
        if (model.SongList.Count == 0)
            await _albumFactory.PrepareSongs(model);

        SelectedModelLines = model.SongList;

        if (model.SongList.Count == 0)
            StatusMessage.Show("Error The selected album doesn't contain any songs");

    }

    private async Task GoToCreate()
    {
        NavManager.NavigateTo("albums/create");
    }
}

